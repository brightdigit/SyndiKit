name: SyndiKit
on:
  push:
    branches-ignore:
      - '*WIP'
      
jobs:
  build-ubuntu:
    name: Build on Ubuntu
    env:
      PACKAGE_NAME: SyndiKit
      SWIFT_VER: ${{ matrix.swift-version }}
    runs-on: ${{ matrix.runs-on }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    strategy:
      matrix:
        runs-on: [ubuntu-22.04, ubuntu-24.04]
        swift-version: [5.7.3, 5.8.1, 5.9]
    steps:
      - uses: actions/checkout@v4
      - uses: brightdigit/swift-build@v1.1.1
        with:
          scheme: ${{ env.PACKAGE_NAME }}-Package
      - uses: sersoft-gmbh/swift-coverage-action@v4
        id: coverage-files
        with:          
          fail-on-empty-output: true
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4       
        with:
          fail_ci_if_error: true
          flags: swift-${{ matrix.swift-version }},ubuntu
          verbose: true        
          token: ${{ secrets.CODECOV_TOKEN }}  
          files: ${{ join(fromJSON(steps.coverage-files.outputs.files), ',') }}    
  build-macos:
    name: Build on macOS
    env:
      PACKAGE_NAME: SyndiKit
    runs-on: ${{ matrix.runs-on }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # SPM Build Matrix - Xcode 14.3.1
          - runs-on: macos-13
            xcode: "/Applications/Xcode_14.3.1.app"

          # SPM Build Matrix - Xcode 15.0.1
          - runs-on: macos-13
            xcode: "/Applications/Xcode_15.0.1.app"

          # SPM Build Matrix - Xcode 15.1
          - runs-on: macos-13
            xcode: "/Applications/Xcode_15.1.app"

          # iOS Build Matrix - Xcode 14.3.1
          - type: ios
            runs-on: macos-13
            xcode: "/Applications/Xcode_14.3.1.app"
            deviceName: "iPhone 14 Pro Max"
            osVersion: "16.4"

          # iOS Build Matrix - Xcode 15.0.1
          - type: ios
            runs-on: macos-13
            xcode: "/Applications/Xcode_15.0.1.app"
            deviceName: "iPhone 15 Pro"
            osVersion: "17.0.1"

          # iOS Build Matrix - Xcode 15.1
          - type: ios
            runs-on: macos-13
            xcode: "/Applications/Xcode_15.1.app"
            deviceName: "iPhone 15 Pro Max"
            osVersion: "17.2"

          # watchOS Build Matrix - Xcode 14.3.1
          - type: watchos
            runs-on: macos-13
            xcode: "/Applications/Xcode_14.3.1.app"
            deviceName: "Apple Watch Ultra (49mm)"
            osVersion: "9.4"

          # watchOS Build Matrix - Xcode 15.0.1
          - type: watchos
            runs-on: macos-13
            xcode: "/Applications/Xcode_15.0.1.app"
            deviceName: "Apple Watch Series 9 (41mm)"
            osVersion: "10.0"

          # watchOS Build Matrix - Xcode 15.1
          - type: watchos
            runs-on: macos-13
            xcode: "/Applications/Xcode_15.1.app"
            deviceName: "Apple Watch Ultra (49mm)"
            osVersion: "10.2"

    steps:
      - uses: actions/checkout@v4

      - name: Build and Test
        uses: brightdigit/swift-build@v1.1.1
        with:
          scheme: ${{ env.PACKAGE_NAME }}-Package
          type: ${{ matrix.type }}
          xcode: ${{ matrix.xcode }}
          deviceName: ${{ matrix.deviceName }}
          osVersion: ${{ matrix.osVersion }}
          
      # Common Coverage Steps
      - name: Process Coverage
        uses: sersoft-gmbh/swift-coverage-action@v4
  
      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.type && format('{0}{1}', matrix.type, matrix.osVersion) || 'spm' }}

  lint:
    name: Linting
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}  
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-macos]
    env:
      MINT_PATH: .mint/lib
      MINT_LINK_PATH: .mint/bin
    steps:
      - uses: actions/checkout@v4    
      - name: Cache mint
        id: cache-mint
        uses: actions/cache@v4  
        env:
          cache-name: cache
        with:
          path: |
            .mint
            Mint         
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}
          restore-keys: |
            ${{ runner.os }}-mint-  
      - name: Install mint
        if: steps.cache-mint.outputs.cache-hit == ''
        run: |
          git clone https://github.com/yonaskolb/Mint.git
          cd Mint
          swift run mint install yonaskolb/mint
      - name: Lint
        run: ./Scripts/lint.sh
